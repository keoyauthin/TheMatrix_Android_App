/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2013 Wastl "derdoktor667" Kraus
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */



apply plugin: 'android'

dependencies {
    // ActionBarCompat
    compile 'com.android.support:appcompat-v7:19.+'

    // Support Libraries
    compile 'com.android.support:support-v4:19.+'

    // Google Play Services
    compile 'com.google.android.gms:play-services:3.+'

    // The libs Folder
    compile fileTree(dir: 'libs', includes: ['*.jar'])

    // Dropbox Chooser Library
    compile 'com.dropbox.chooser:android:1.+'

    // The Facebook SDK Library
    compile 'com.facebook.android:facebook:3.+'
}

android {
    compileSdkVersion "Google Inc.:Google APIs:19"
    buildToolsVersion "19.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19

        if (project.hasProperty('versionNumber') &&
        project.hasProperty('versionRevision')) {
            versionName project.versionNumber
            versionCode Integer.parseInt(project.versionRevision)
        }
    }

    if (project.hasProperty('signingStoreLocation') &&
    project.hasProperty('signingStorePassword') &&
    project.hasProperty('signingKeyAlias') &&
    project.hasProperty('signingKeyPassword')) {

        println ""
        println "Found sign properties in gradle.properties! Signing buildâ€¦"
        println ""

        signingConfigs {

            release {
                storeFile file(signingStoreLocation)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }

            debug {
                storeFile file(signingStoreLocation)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
                    
            beta {
                storeFile file(signingStoreLocation)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
        }

        buildTypes {

            release {
                debuggable false
                zipAlign true
                signingConfig signingConfigs.release
            }

            debug {
                versionNameSuffix " Debug "
                debuggable true
                zipAlign true
                signingConfig signingConfigs.debug
            }
                 
            beta {
                versionNameSuffix " Beta "
                debuggable true
                zipAlign true
                signingConfig signingConfigs.beta
            }
        }
    }
}
